networks:
  sneakdex-network:
    driver: bridge

volumes:
  go-mod-cache:
  cargo-registry:
  cargo-git:
  target-cache:

services:
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: sneakdex-kafka
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_MESSAGE_MAX_BYTES=10485760
      - KAFKA_CFG_REPLICA_FETCH_MAX_BYTES=10485760
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_JMX_PORT=9999
    networks:
      - sneakdex-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: sneakdex-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    networks:
      - sneakdex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  crawler:
    build:
      context: ../crawler
    init: true
    env_file:
      - ../crawler/.env
    volumes:
      - ../crawler:/app
      - go-mod-cache:/go/pkg/mod
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      parser:
        condition: service_healthy
    networks:
      - sneakdex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  parser:
    build: .
    env_file:
      - .env
    volumes:
      - .:/app
      - cargo-registry:/usr/local/cargo/registry
      - cargo-git:/usr/local/cargo/git
      - target-cache:/app/target
    working_dir: /app
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - sneakdex-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
